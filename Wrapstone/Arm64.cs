using System;
using PrettyPrinter;

namespace Wrapstone.Arm64 {
	public enum Opcode : uint {
		INVALID, 
		ABS,
		ADC,
		ADDHN,
		ADDHN2,
		ADDP,
		ADD,
		ADDV,
		ADR,
		ADRP,
		AESD,
		AESE,
		AESIMC,
		AESMC,
		AND,
		ASR,
		B,
		BFM,
		BIC,
		BIF,
		BIT,
		BL,
		BLR,
		BR,
		BRK,
		BSL,
		CBNZ,
		CBZ,
		CCMN,
		CCMP,
		CLREX,
		CLS,
		CLZ,
		CMEQ,
		CMGE,
		CMGT,
		CMHI,
		CMHS,
		CMLE,
		CMLT,
		CMTST,
		CNT,
		MOV,
		CRC32B,
		CRC32CB,
		CRC32CH,
		CRC32CW,
		CRC32CX,
		CRC32H,
		CRC32W,
		CRC32X,
		CSEL,
		CSINC,
		CSINV,
		CSNEG,
		DCPS1,
		DCPS2,
		DCPS3,
		DMB,
		DRPS,
		DSB,
		DUP,
		EON,
		EOR,
		ERET,
		EXTR,
		EXT,
		FABD,
		FABS,
		FACGE,
		FACGT,
		FADD,
		FADDP,
		FCCMP,
		FCCMPE,
		FCMEQ,
		FCMGE,
		FCMGT,
		FCMLE,
		FCMLT,
		FCMP,
		FCMPE,
		FCSEL,
		FCVTAS,
		FCVTAU,
		FCVT,
		FCVTL,
		FCVTL2,
		FCVTMS,
		FCVTMU,
		FCVTNS,
		FCVTNU,
		FCVTN,
		FCVTN2,
		FCVTPS,
		FCVTPU,
		FCVTXN,
		FCVTXN2,
		FCVTZS,
		FCVTZU,
		FDIV,
		FMADD,
		FMAX,
		FMAXNM,
		FMAXNMP,
		FMAXNMV,
		FMAXP,
		FMAXV,
		FMIN,
		FMINNM,
		FMINNMP,
		FMINNMV,
		FMINP,
		FMINV,
		FMLA,
		FMLS,
		FMOV,
		FMSUB,
		FMUL,
		FMULX,
		FNEG,
		FNMADD,
		FNMSUB,
		FNMUL,
		FRECPE,
		FRECPS,
		FRECPX,
		FRINTA,
		FRINTI,
		FRINTM,
		FRINTN,
		FRINTP,
		FRINTX,
		FRINTZ,
		FRSQRTE,
		FRSQRTS,
		FSQRT,
		FSUB,
		HINT,
		HLT,
		HVC,
		INS,
		ISB,
		LD1,
		LD1R,
		LD2R,
		LD2,
		LD3R,
		LD3,
		LD4,
		LD4R,
		LDARB,
		LDARH,
		LDAR,
		LDAXP,
		LDAXRB,
		LDAXRH,
		LDAXR,
		LDNP,
		LDP,
		LDPSW,
		LDRB,
		LDR,
		LDRH,
		LDRSB,
		LDRSH,
		LDRSW,
		LDTRB,
		LDTRH,
		LDTRSB,
		LDTRSH,
		LDTRSW,
		LDTR,
		LDURB,
		LDUR,
		LDURH,
		LDURSB,
		LDURSH,
		LDURSW,
		LDXP,
		LDXRB,
		LDXRH,
		LDXR,
		LSL,
		LSR,
		MADD,
		MLA,
		MLS,
		MOVI,
		MOVK,
		MOVN,
		MOVZ,
		MRS,
		MSR,
		MSUB,
		MUL,
		MVNI,
		NEG,
		NOT,
		ORN,
		ORR,
		PMULL2,
		PMULL,
		PMUL,
		PRFM,
		PRFUM,
		RADDHN,
		RADDHN2,
		RBIT,
		RET,
		REV16,
		REV32,
		REV64,
		REV,
		ROR,
		RSHRN2,
		RSHRN,
		RSUBHN,
		RSUBHN2,
		SABAL2,
		SABAL,
		SABA,
		SABDL2,
		SABDL,
		SABD,
		SADALP,
		SADDLP,
		SADDLV,
		SADDL2,
		SADDL,
		SADDW2,
		SADDW,
		SBC,
		SBFM,
		SCVTF,
		SDIV,
		SHA1C,
		SHA1H,
		SHA1M,
		SHA1P,
		SHA1SU0,
		SHA1SU1,
		SHA256H2,
		SHA256H,
		SHA256SU0,
		SHA256SU1,
		SHADD,
		SHLL2,
		SHLL,
		SHL,
		SHRN2,
		SHRN,
		SHSUB,
		SLI,
		SMADDL,
		SMAXP,
		SMAXV,
		SMAX,
		SMC,
		SMINP,
		SMINV,
		SMIN,
		SMLAL2,
		SMLAL,
		SMLSL2,
		SMLSL,
		SMOV,
		SMSUBL,
		SMULH,
		SMULL2,
		SMULL,
		SQABS,
		SQADD,
		SQDMLAL,
		SQDMLAL2,
		SQDMLSL,
		SQDMLSL2,
		SQDMULH,
		SQDMULL,
		SQDMULL2,
		SQNEG,
		SQRDMULH,
		SQRSHL,
		SQRSHRN,
		SQRSHRN2,
		SQRSHRUN,
		SQRSHRUN2,
		SQSHLU,
		SQSHL,
		SQSHRN,
		SQSHRN2,
		SQSHRUN,
		SQSHRUN2,
		SQSUB,
		SQXTN2,
		SQXTN,
		SQXTUN2,
		SQXTUN,
		SRHADD,
		SRI,
		SRSHL,
		SRSHR,
		SRSRA,
		SSHLL2,
		SSHLL,
		SSHL,
		SSHR,
		SSRA,
		SSUBL2,
		SSUBL,
		SSUBW2,
		SSUBW,
		ST1,
		ST2,
		ST3,
		ST4,
		STLRB,
		STLRH,
		STLR,
		STLXP,
		STLXRB,
		STLXRH,
		STLXR,
		STNP,
		STP,
		STRB,
		STR,
		STRH,
		STTRB,
		STTRH,
		STTR,
		STURB,
		STUR,
		STURH,
		STXP,
		STXRB,
		STXRH,
		STXR,
		SUBHN,
		SUBHN2,
		SUB,
		SUQADD,
		SVC,
		SYSL,
		SYS,
		TBL,
		TBNZ,
		TBX,
		TBZ,
		TRN1,
		TRN2,
		UABAL2,
		UABAL,
		UABA,
		UABDL2,
		UABDL,
		UABD,
		UADALP,
		UADDLP,
		UADDLV,
		UADDL2,
		UADDL,
		UADDW2,
		UADDW,
		UBFM,
		UCVTF,
		UDIV,
		UHADD,
		UHSUB,
		UMADDL,
		UMAXP,
		UMAXV,
		UMAX,
		UMINP,
		UMINV,
		UMIN,
		UMLAL2,
		UMLAL,
		UMLSL2,
		UMLSL,
		UMOV,
		UMSUBL,
		UMULH,
		UMULL2,
		UMULL,
		UQADD,
		UQRSHL,
		UQRSHRN,
		UQRSHRN2,
		UQSHL,
		UQSHRN,
		UQSHRN2,
		UQSUB,
		UQXTN2,
		UQXTN,
		URECPE,
		URHADD,
		URSHL,
		URSHR,
		URSQRTE,
		URSRA,
		USHLL2,
		USHLL,
		USHL,
		USHR,
		USQADD,
		USRA,
		USUBL2,
		USUBL,
		USUBW2,
		USUBW,
		UZP1,
		UZP2,
		XTN2,
		XTN,
		ZIP1,
		ZIP2,
		MNEG,
		UMNEGL,
		SMNEGL,
		NOP,
		YIELD,
		WFE,
		WFI,
		SEV,
		SEVL,
		NGC,
		SBFIZ,
		UBFIZ,
		SBFX,
		UBFX,
		BFI,
		BFXIL,
		CMN,
		MVN,
		TST,
		CSET,
		CINC,
		CSETM,
		CINV,
		CNEG,
		SXTB,
		SXTH,
		SXTW,
		CMP,
		UXTB,
		UXTH,
		UXTW,
		IC,
		DC,
		AT,
		TLBI,
		NEGS,
		NGCS
	}
	
	public enum Reg {
		INVALID,
		X29,
		X30,
		NZCV,
		SP,
		WSP,
		WZR,
		XZR,
		B0,
		B1,
		B2,
		B3,
		B4,
		B5,
		B6,
		B7,
		B8,
		B9,
		B10,
		B11,
		B12,
		B13,
		B14,
		B15,
		B16,
		B17,
		B18,
		B19,
		B20,
		B21,
		B22,
		B23,
		B24,
		B25,
		B26,
		B27,
		B28,
		B29,
		B30,
		B31,
		D0,
		D1,
		D2,
		D3,
		D4,
		D5,
		D6,
		D7,
		D8,
		D9,
		D10,
		D11,
		D12,
		D13,
		D14,
		D15,
		D16,
		D17,
		D18,
		D19,
		D20,
		D21,
		D22,
		D23,
		D24,
		D25,
		D26,
		D27,
		D28,
		D29,
		D30,
		D31,
		H0,
		H1,
		H2,
		H3,
		H4,
		H5,
		H6,
		H7,
		H8,
		H9,
		H10,
		H11,
		H12,
		H13,
		H14,
		H15,
		H16,
		H17,
		H18,
		H19,
		H20,
		H21,
		H22,
		H23,
		H24,
		H25,
		H26,
		H27,
		H28,
		H29,
		H30,
		H31,
		Q0,
		Q1,
		Q2,
		Q3,
		Q4,
		Q5,
		Q6,
		Q7,
		Q8,
		Q9,
		Q10,
		Q11,
		Q12,
		Q13,
		Q14,
		Q15,
		Q16,
		Q17,
		Q18,
		Q19,
		Q20,
		Q21,
		Q22,
		Q23,
		Q24,
		Q25,
		Q26,
		Q27,
		Q28,
		Q29,
		Q30,
		Q31,
		S0,
		S1,
		S2,
		S3,
		S4,
		S5,
		S6,
		S7,
		S8,
		S9,
		S10,
		S11,
		S12,
		S13,
		S14,
		S15,
		S16,
		S17,
		S18,
		S19,
		S20,
		S21,
		S22,
		S23,
		S24,
		S25,
		S26,
		S27,
		S28,
		S29,
		S30,
		S31,
		W0,
		W1,
		W2,
		W3,
		W4,
		W5,
		W6,
		W7,
		W8,
		W9,
		W10,
		W11,
		W12,
		W13,
		W14,
		W15,
		W16,
		W17,
		W18,
		W19,
		W20,
		W21,
		W22,
		W23,
		W24,
		W25,
		W26,
		W27,
		W28,
		W29,
		W30,
		X0,
		X1,
		X2,
		X3,
		X4,
		X5,
		X6,
		X7,
		X8,
		X9,
		X10,
		X11,
		X12,
		X13,
		X14,
		X15,
		X16,
		X17,
		X18,
		X19,
		X20,
		X21,
		X22,
		X23,
		X24,
		X25,
		X26,
		X27,
		X28,

		V0,
		V1,
		V2,
		V3,
		V4,
		V5,
		V6,
		V7,
		V8,
		V9,
		V10,
		V11,
		V12,
		V13,
		V14,
		V15,
		V16,
		V17,
		V18,
		V19,
		V20,
		V21,
		V22,
		V23,
		V24,
		V25,
		V26,
		V27,
		V28,
		V29,
		V30,
		V31
	}
	
	public abstract class Operand {}
	public class RegOperand : Operand {
		public readonly Reg Reg;
		public RegOperand(Reg reg) => Reg = reg;
	}
	public class ImmOperand : Operand {
		public readonly ulong Value;
		public ImmOperand(ulong value) => Value = value;
	}
	public class MemOperand : Operand {
		public readonly Reg Base, Index;
		public readonly int Offset;
		public MemOperand(Reg @base, Reg index, int offset) {
			Base = @base;
			Index = index;
			Offset = offset;
		}
	}

	public class Instruction : InstructionBase<ulong, Opcode, Operand> {
		public override string ToString() => $"{Address:X016} {Mnemonic} {OpStr}";

		internal override unsafe void ParseDetails(CsDetailBase* detail) {
			var ad = (CsArm64Detail*) &detail->ArchSpecificPlaceholder;
			var ops = (CsArm64Op*) &ad->OpsPlaceholder;
			for(var i = 0; i < ad->OpCount; ++i) {
				var op = ops[i];
				switch(op.OpType) {
					case 1:
						Operands.Add(new RegOperand(*(Reg*) &op.Placeholder0));
						break;
					case 2:
						Operands.Add(new ImmOperand(*(ulong*) &op.Placeholder0));
						break;
					case 3:
						Operands.Add(new MemOperand(
							*(Reg*) &op.Placeholder0, 
							*(Reg*) &op.Placeholder1, 
							*(int*) &op.Placeholder2
						));
						break;
					default:
						throw new NotImplementedException($"Operand type {op.OpType} not supported");
				}
			}
		}
	}
	
	public class Disassembler : DisassemblerBase<ulong, Instruction, Opcode, Operand> {
		public Disassembler() : base(Architecture.Arm64, Mode.Arm) {}
	}
}