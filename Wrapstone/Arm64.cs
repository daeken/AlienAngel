using System;
using PrettyPrinter;

namespace Wrapstone.Arm64 {
	public enum Opcode : uint {
		Invalid, 
		Abs,
		Adc,
		Addhn,
		Addhn2,
		Addp,
		Add,
		Addv,
		Adr,
		Adrp,
		Aesd,
		Aese,
		Aesimc,
		Aesmc,
		And,
		Asr,
		B,
		Bfm,
		Bic,
		Bif,
		Bit,
		Bl,
		Blr,
		Br,
		Brk,
		Bsl,
		Cbnz,
		Cbz,
		Ccmn,
		Ccmp,
		Clrex,
		Cls,
		Clz,
		Cmeq,
		Cmge,
		Cmgt,
		Cmhi,
		Cmhs,
		Cmle,
		Cmlt,
		Cmtst,
		Cnt,
		Mov,
		Crc32b,
		Crc32cb,
		Crc32ch,
		Crc32cw,
		Crc32cx,
		Crc32h,
		Crc32w,
		Crc32x,
		Csel,
		Csinc,
		Csinv,
		Csneg,
		Dcps1,
		Dcps2,
		Dcps3,
		Dmb,
		Drps,
		Dsb,
		Dup,
		Eon,
		Eor,
		Eret,
		Extr,
		Ext,
		Fabd,
		Fabs,
		Facge,
		Facgt,
		Fadd,
		Faddp,
		Fccmp,
		Fccmpe,
		Fcmeq,
		Fcmge,
		Fcmgt,
		Fcmle,
		Fcmlt,
		Fcmp,
		Fcmpe,
		Fcsel,
		Fcvtas,
		Fcvtau,
		Fcvt,
		Fcvtl,
		Fcvtl2,
		Fcvtms,
		Fcvtmu,
		Fcvtns,
		Fcvtnu,
		Fcvtn,
		Fcvtn2,
		Fcvtps,
		Fcvtpu,
		Fcvtxn,
		Fcvtxn2,
		Fcvtzs,
		Fcvtzu,
		Fdiv,
		Fmadd,
		Fmax,
		Fmaxnm,
		Fmaxnmp,
		Fmaxnmv,
		Fmaxp,
		Fmaxv,
		Fmin,
		Fminnm,
		Fminnmp,
		Fminnmv,
		Fminp,
		Fminv,
		Fmla,
		Fmls,
		Fmov,
		Fmsub,
		Fmul,
		Fmulx,
		Fneg,
		Fnmadd,
		Fnmsub,
		Fnmul,
		Frecpe,
		Frecps,
		Frecpx,
		Frinta,
		Frinti,
		Frintm,
		Frintn,
		Frintp,
		Frintx,
		Frintz,
		Frsqrte,
		Frsqrts,
		Fsqrt,
		Fsub,
		Hint,
		Hlt,
		Hvc,
		Ins,
		Isb,
		Ld1,
		Ld1r,
		Ld2r,
		Ld2,
		Ld3r,
		Ld3,
		Ld4,
		Ld4r,
		Ldarb,
		Ldarh,
		Ldar,
		Ldaxp,
		Ldaxrb,
		Ldaxrh,
		Ldaxr,
		Ldnp,
		Ldp,
		Ldpsw,
		Ldrb,
		Ldr,
		Ldrh,
		Ldrsb,
		Ldrsh,
		Ldrsw,
		Ldtrb,
		Ldtrh,
		Ldtrsb,
		Ldtrsh,
		Ldtrsw,
		Ldtr,
		Ldurb,
		Ldur,
		Ldurh,
		Ldursb,
		Ldursh,
		Ldursw,
		Ldxp,
		Ldxrb,
		Ldxrh,
		Ldxr,
		Lsl,
		Lsr,
		Madd,
		Mla,
		Mls,
		Movi,
		Movk,
		Movn,
		Movz,
		Mrs,
		Msr,
		Msub,
		Mul,
		Mvni,
		Neg,
		Not,
		Orn,
		Orr,
		Pmull2,
		Pmull,
		Pmul,
		Prfm,
		Prfum,
		Raddhn,
		Raddhn2,
		Rbit,
		Ret,
		Rev16,
		Rev32,
		Rev64,
		Rev,
		Ror,
		Rshrn2,
		Rshrn,
		Rsubhn,
		Rsubhn2,
		Sabal2,
		Sabal,
		Saba,
		Sabdl2,
		Sabdl,
		Sabd,
		Sadalp,
		Saddlp,
		Saddlv,
		Saddl2,
		Saddl,
		Saddw2,
		Saddw,
		Sbc,
		Sbfm,
		Scvtf,
		Sdiv,
		Sha1c,
		Sha1h,
		Sha1m,
		Sha1p,
		Sha1su0,
		Sha1su1,
		Sha256h2,
		Sha256h,
		Sha256su0,
		Sha256su1,
		Shadd,
		Shll2,
		Shll,
		Shl,
		Shrn2,
		Shrn,
		Shsub,
		Sli,
		Smaddl,
		Smaxp,
		Smaxv,
		Smax,
		Smc,
		Sminp,
		Sminv,
		Smin,
		Smlal2,
		Smlal,
		Smlsl2,
		Smlsl,
		Smov,
		Smsubl,
		Smulh,
		Smull2,
		Smull,
		Sqabs,
		Sqadd,
		Sqdmlal,
		Sqdmlal2,
		Sqdmlsl,
		Sqdmlsl2,
		Sqdmulh,
		Sqdmull,
		Sqdmull2,
		Sqneg,
		Sqrdmulh,
		Sqrshl,
		Sqrshrn,
		Sqrshrn2,
		Sqrshrun,
		Sqrshrun2,
		Sqshlu,
		Sqshl,
		Sqshrn,
		Sqshrn2,
		Sqshrun,
		Sqshrun2,
		Sqsub,
		Sqxtn2,
		Sqxtn,
		Sqxtun2,
		Sqxtun,
		Srhadd,
		Sri,
		Srshl,
		Srshr,
		Srsra,
		Sshll2,
		Sshll,
		Sshl,
		Sshr,
		Ssra,
		Ssubl2,
		Ssubl,
		Ssubw2,
		Ssubw,
		St1,
		St2,
		St3,
		St4,
		Stlrb,
		Stlrh,
		Stlr,
		Stlxp,
		Stlxrb,
		Stlxrh,
		Stlxr,
		Stnp,
		Stp,
		Strb,
		Str,
		Strh,
		Sttrb,
		Sttrh,
		Sttr,
		Sturb,
		Stur,
		Sturh,
		Stxp,
		Stxrb,
		Stxrh,
		Stxr,
		Subhn,
		Subhn2,
		Sub,
		Suqadd,
		Svc,
		Sysl,
		Sys,
		Tbl,
		Tbnz,
		Tbx,
		Tbz,
		Trn1,
		Trn2,
		Uabal2,
		Uabal,
		Uaba,
		Uabdl2,
		Uabdl,
		Uabd,
		Uadalp,
		Uaddlp,
		Uaddlv,
		Uaddl2,
		Uaddl,
		Uaddw2,
		Uaddw,
		Ubfm,
		Ucvtf,
		Udiv,
		Uhadd,
		Uhsub,
		Umaddl,
		Umaxp,
		Umaxv,
		Umax,
		Uminp,
		Uminv,
		Umin,
		Umlal2,
		Umlal,
		Umlsl2,
		Umlsl,
		Umov,
		Umsubl,
		Umulh,
		Umull2,
		Umull,
		Uqadd,
		Uqrshl,
		Uqrshrn,
		Uqrshrn2,
		Uqshl,
		Uqshrn,
		Uqshrn2,
		Uqsub,
		Uqxtn2,
		Uqxtn,
		Urecpe,
		Urhadd,
		Urshl,
		Urshr,
		Ursqrte,
		Ursra,
		Ushll2,
		Ushll,
		Ushl,
		Ushr,
		Usqadd,
		Usra,
		Usubl2,
		Usubl,
		Usubw2,
		Usubw,
		Uzp1,
		Uzp2,
		Xtn2,
		Xtn,
		Zip1,
		Zip2,
		Mneg,
		Umnegl,
		Smnegl,
		Nop,
		Yield,
		Wfe,
		Wfi,
		Sev,
		Sevl,
		Ngc,
		Sbfiz,
		Ubfiz,
		Sbfx,
		Ubfx,
		Bfi,
		Bfxil,
		Cmn,
		Mvn,
		Tst,
		Cset,
		Cinc,
		Csetm,
		Cinv,
		Cneg,
		Sxtb,
		Sxth,
		Sxtw,
		Cmp,
		Uxtb,
		Uxth,
		Uxtw,
		Ic,
		Dc,
		At,
		Tlbi,
		Negs,
		Ngcs
	}
	
	public enum Reg {
		Invalid,
		X29,
		X30,
		Nzcv,
		Sp,
		Wsp,
		Wzr,
		Xzr,
		B0,
		B1,
		B2,
		B3,
		B4,
		B5,
		B6,
		B7,
		B8,
		B9,
		B10,
		B11,
		B12,
		B13,
		B14,
		B15,
		B16,
		B17,
		B18,
		B19,
		B20,
		B21,
		B22,
		B23,
		B24,
		B25,
		B26,
		B27,
		B28,
		B29,
		B30,
		B31,
		D0,
		D1,
		D2,
		D3,
		D4,
		D5,
		D6,
		D7,
		D8,
		D9,
		D10,
		D11,
		D12,
		D13,
		D14,
		D15,
		D16,
		D17,
		D18,
		D19,
		D20,
		D21,
		D22,
		D23,
		D24,
		D25,
		D26,
		D27,
		D28,
		D29,
		D30,
		D31,
		H0,
		H1,
		H2,
		H3,
		H4,
		H5,
		H6,
		H7,
		H8,
		H9,
		H10,
		H11,
		H12,
		H13,
		H14,
		H15,
		H16,
		H17,
		H18,
		H19,
		H20,
		H21,
		H22,
		H23,
		H24,
		H25,
		H26,
		H27,
		H28,
		H29,
		H30,
		H31,
		Q0,
		Q1,
		Q2,
		Q3,
		Q4,
		Q5,
		Q6,
		Q7,
		Q8,
		Q9,
		Q10,
		Q11,
		Q12,
		Q13,
		Q14,
		Q15,
		Q16,
		Q17,
		Q18,
		Q19,
		Q20,
		Q21,
		Q22,
		Q23,
		Q24,
		Q25,
		Q26,
		Q27,
		Q28,
		Q29,
		Q30,
		Q31,
		S0,
		S1,
		S2,
		S3,
		S4,
		S5,
		S6,
		S7,
		S8,
		S9,
		S10,
		S11,
		S12,
		S13,
		S14,
		S15,
		S16,
		S17,
		S18,
		S19,
		S20,
		S21,
		S22,
		S23,
		S24,
		S25,
		S26,
		S27,
		S28,
		S29,
		S30,
		S31,
		W0,
		W1,
		W2,
		W3,
		W4,
		W5,
		W6,
		W7,
		W8,
		W9,
		W10,
		W11,
		W12,
		W13,
		W14,
		W15,
		W16,
		W17,
		W18,
		W19,
		W20,
		W21,
		W22,
		W23,
		W24,
		W25,
		W26,
		W27,
		W28,
		W29,
		W30,
		X0,
		X1,
		X2,
		X3,
		X4,
		X5,
		X6,
		X7,
		X8,
		X9,
		X10,
		X11,
		X12,
		X13,
		X14,
		X15,
		X16,
		X17,
		X18,
		X19,
		X20,
		X21,
		X22,
		X23,
		X24,
		X25,
		X26,
		X27,
		X28,

		V0,
		V1,
		V2,
		V3,
		V4,
		V5,
		V6,
		V7,
		V8,
		V9,
		V10,
		V11,
		V12,
		V13,
		V14,
		V15,
		V16,
		V17,
		V18,
		V19,
		V20,
		V21,
		V22,
		V23,
		V24,
		V25,
		V26,
		V27,
		V28,
		V29,
		V30,
		V31
	}

	public abstract class Operand {
		public static implicit operator Reg(Operand op) => op is RegOperand rop ? rop.Reg : Reg.Invalid;
	}
	public class RegOperand : Operand {
		public readonly Reg Reg;
		public RegOperand(Reg reg) => Reg = reg;
		public static implicit operator Reg(RegOperand op) => op.Reg;
	}
	public class ImmOperand : Operand {
		public readonly ulong Value;
		public ImmOperand(ulong value) => Value = value;
	}
	public class MemOperand : Operand {
		public readonly Reg Base, Index;
		public readonly int Offset;
		public MemOperand(Reg @base, Reg index, int offset) {
			Base = @base;
			Index = index;
			Offset = offset;
		}
	}

	public class Instruction : InstructionBase<ulong, Opcode, Operand> {
		public override string ToString() => $"{Address:X016} {Mnemonic} {OpStr}";

		internal override unsafe void ParseDetails(CsDetailBase* detail) {
			var ad = (CsArm64Detail*) &detail->ArchSpecificPlaceholder;
			var ops = (CsArm64Op*) &ad->OpsPlaceholder;
			for(var i = 0; i < ad->OpCount; ++i) {
				var op = ops[i];
				switch(op.OpType) {
					case 1:
						Operands.Add(new RegOperand(*(Reg*) &op.Placeholder0));
						break;
					case 2:
						Operands.Add(new ImmOperand(*(ulong*) &op.Placeholder0));
						break;
					case 3:
						Operands.Add(new MemOperand(
							*(Reg*) &op.Placeholder0, 
							*(Reg*) &op.Placeholder1, 
							*(int*) &op.Placeholder2
						));
						break;
					default:
						throw new NotImplementedException($"Operand type {op.OpType} not supported");
				}
			}
		}
	}
	
	public class Disassembler : DisassemblerBase<ulong, Instruction, Opcode, Operand> {
		public Disassembler() : base(Architecture.Arm64, Mode.Arm) {}
	}
}